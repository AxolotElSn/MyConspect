'use strict';

const inputRub = document.querySelector('#rub'),
      inputUsd = document.querySelector('#usd');

// XMLHttpRequest - встроенный объект в браузер, используется для выполнения HTTP-запросов к серверам из JavaScript
inputRub.addEventListener('input', () => {  // так же есть событие change, работает так же как input, но срабатывает когда эдемент уходит из нашего фокуса. Иначе говоря, если мы кликнем за границей элемента
    const request = new XMLHttpRequest(); // создаем новый объект

    // get - запрос направлен на то чтоб получить какие-то данные с сервера
    // post - запрос наоборот когда мы заливаем данные на сервер
    // асинхронный код - это код который не влияет свом выполнением на остальную часть кода

    request.open('GET', '../json/current.json'); // метод собитрает настройки для запроса. 1ый аргумент это метод, использующийся для запроса. 2ой аргумент это путь к серверу url. Но мы посылаем запросы с html файла, соответственно и путь мы должны писать относительно html файла. 3ий аргумент это асинхронность (trye / false. Изначально true) - (мы отправили запрос на сервер и не знаем сколько он будет выполняться. Но остальной код продолжит свое выполнение не зависимо от времени выполнения запроса). 4ый и 5ый аргументы это логин и пароль (некоторый запросы мы можем делать только имея логин и пароль) request.open(method, url, async, login, password);

    request.setRequestHeader('Content-type', 'application/json; charset=utf-8'); // http - заголовок, который нужен для передачи json файла. Когда мы отправляем запрос, нам нужно сказать что именно мы отправляем. Делаем мы для того чтоб протоколы понимали что они передают, чтоб сервер понимал что он принимает request.setRequestHeader(тип контента, указываем какой тип; кодировка котопую используем)

    request.send(); // если у нас гет запрос то ничего, если у нас пост запрос - значит мы какие-то данные постим на сервер и у метода send будет будет принемать какой-то body

    // request.addEventListener('readystatechange', () => {  // событие отслеживает статус готовности запроса в данный текущий момент. Оно следит за свойтвом redyState. будет вызываться при каждом этапе
    //     if (request.readyState === 4 && request.status === 200) { // 4 это состояние redyState когда запрос отработал как надо. 200 - статус запроса "хорошо"
    //         console.log(request.response); // получили json объект
    //         const data = JSON.parse(request.response);
    //         inputUsd.value = (+inputRub.value / data.current.usd).toFixed(2); // .value - то что содержится в переменной. toFixed() - метод ограничивающий количество знаков после точки
    //     } else {
    //         inputUsd.value = "Что-то пошло не так";
    //     }
    // }); // это событие используется реже потому что нам редко нужны различные стадии запроса

    request.addEventListener('load', () => { // более удобное соьытие
        if (request.status === 200) {
            console.log(request.response);
            const data = JSON.parse(request.response);
            inputUsd.value = (+inputRub.value / data.current.usd).toFixed(2);
        } else {
            inputUsd.value = "Что-то пошло не так";
        }
    });

    /* свойства объекта XMLHttpRequest:
    1) status - содержит статус нашего запроса (код) (404)
    2) statusText - тоже самое только текстом (not found)
    3) response - ответ от сервера (то что мы должны использовать)
    4) redyState - текущее состояние запроса (от 0 до 4) */

});

